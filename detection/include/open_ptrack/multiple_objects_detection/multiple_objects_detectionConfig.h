//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the multiple_objects_detection package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __multiple_objects_detection__MULTIPLE_OBJECTS_DETECTIONCONFIG_H__
#define __multiple_objects_detection__MULTIPLE_OBJECTS_DETECTIONCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace multiple_objects_detection
{
  class multiple_objects_detectionConfigStatics;
  
  class multiple_objects_detectionConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(multiple_objects_detectionConfig &config, const multiple_objects_detectionConfig &max, const multiple_objects_detectionConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const multiple_objects_detectionConfig &config1, const multiple_objects_detectionConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, multiple_objects_detectionConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const multiple_objects_detectionConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, multiple_objects_detectionConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const multiple_objects_detectionConfig &config) const = 0;
      virtual void getValue(const multiple_objects_detectionConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T multiple_objects_detectionConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (multiple_objects_detectionConfig::* field);

      virtual void clamp(multiple_objects_detectionConfig &config, const multiple_objects_detectionConfig &max, const multiple_objects_detectionConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const multiple_objects_detectionConfig &config1, const multiple_objects_detectionConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, multiple_objects_detectionConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const multiple_objects_detectionConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, multiple_objects_detectionConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const multiple_objects_detectionConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const multiple_objects_detectionConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, multiple_objects_detectionConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, multiple_objects_detectionConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<multiple_objects_detectionConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(multiple_objects_detectionConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("HMax"==(*_i)->name){HMax = boost::any_cast<int>(val);}
        if("SMax"==(*_i)->name){SMax = boost::any_cast<int>(val);}
        if("VMax"==(*_i)->name){VMax = boost::any_cast<int>(val);}
        if("HMin"==(*_i)->name){HMin = boost::any_cast<int>(val);}
        if("SMin"==(*_i)->name){SMin = boost::any_cast<int>(val);}
        if("VMin"==(*_i)->name){VMin = boost::any_cast<int>(val);}
        if("use_hs"==(*_i)->name){use_hs = boost::any_cast<bool>(val);}
        if("h_bins"==(*_i)->name){h_bins = boost::any_cast<int>(val);}
        if("s_bins"==(*_i)->name){s_bins = boost::any_cast<int>(val);}
        if("AREA_TOLERANCE"==(*_i)->name){AREA_TOLERANCE = boost::any_cast<int>(val);}
        if("QUALITY_TOLERANCE"==(*_i)->name){QUALITY_TOLERANCE = boost::any_cast<int>(val);}
        if("DENSITY_TOLORENCE"==(*_i)->name){DENSITY_TOLORENCE = boost::any_cast<int>(val);}
      }
    }

    int HMax;
int SMax;
int VMax;
int HMin;
int SMin;
int VMin;
bool use_hs;
int h_bins;
int s_bins;
int AREA_TOLERANCE;
int QUALITY_TOLERANCE;
int DENSITY_TOLORENCE;

    bool state;
    std::string name;

    
}groups;



//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int HMax;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int SMax;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int VMax;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int HMin;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int SMin;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int VMin;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_hs;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int h_bins;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int s_bins;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int AREA_TOLERANCE;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int QUALITY_TOLERANCE;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int DENSITY_TOLORENCE;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("multiple_objects_detectionConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const multiple_objects_detectionConfig &__max__ = __getMax__();
      const multiple_objects_detectionConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const multiple_objects_detectionConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const multiple_objects_detectionConfig &__getDefault__();
    static const multiple_objects_detectionConfig &__getMax__();
    static const multiple_objects_detectionConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const multiple_objects_detectionConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void multiple_objects_detectionConfig::ParamDescription<std::string>::clamp(multiple_objects_detectionConfig &config, const multiple_objects_detectionConfig &max, const multiple_objects_detectionConfig &min) const
  {
    return;
  }

  class multiple_objects_detectionConfigStatics
  {
    friend class multiple_objects_detectionConfig;
    
    multiple_objects_detectionConfigStatics()
    {
multiple_objects_detectionConfig::GroupDescription<multiple_objects_detectionConfig::DEFAULT, multiple_objects_detectionConfig> Default("Default", "", 0, 0, true, &multiple_objects_detectionConfig::groups);
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.HMax = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.HMax = 360;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.HMax = 360;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("HMax", "int", 0, "Hue max", "", &multiple_objects_detectionConfig::HMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("HMax", "int", 0, "Hue max", "", &multiple_objects_detectionConfig::HMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SMax = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SMax = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SMax = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("SMax", "int", 0, "Saturation max", "", &multiple_objects_detectionConfig::SMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("SMax", "int", 0, "Saturation max", "", &multiple_objects_detectionConfig::SMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.VMax = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.VMax = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.VMax = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("VMax", "int", 0, "Value max", "", &multiple_objects_detectionConfig::VMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("VMax", "int", 0, "Value max", "", &multiple_objects_detectionConfig::VMax)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.HMin = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.HMin = 360;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.HMin = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("HMin", "int", 0, "Hue min", "", &multiple_objects_detectionConfig::HMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("HMin", "int", 0, "Hue min", "", &multiple_objects_detectionConfig::HMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SMin = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SMin = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SMin = 80;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("SMin", "int", 0, "Saturation min", "", &multiple_objects_detectionConfig::SMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("SMin", "int", 0, "Saturation min", "", &multiple_objects_detectionConfig::SMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.VMin = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.VMin = 255;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.VMin = 100;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("VMin", "int", 0, "Value min", "", &multiple_objects_detectionConfig::VMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("VMin", "int", 0, "Value min", "", &multiple_objects_detectionConfig::VMin)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_hs = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_hs = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_hs = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<bool>("use_hs", "bool", 0, "whether use HS or just H to gennerate the hist of roi to do the back projection", "", &multiple_objects_detectionConfig::use_hs)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<bool>("use_hs", "bool", 0, "whether use HS or just H to gennerate the hist of roi to do the back projection", "", &multiple_objects_detectionConfig::use_hs)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.h_bins = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.h_bins = 100;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.h_bins = 36;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("h_bins", "int", 0, "Divide (HMin,HMax) to h_bins parts", "", &multiple_objects_detectionConfig::h_bins)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("h_bins", "int", 0, "Divide (HMin,HMax) to h_bins parts", "", &multiple_objects_detectionConfig::h_bins)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.s_bins = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.s_bins = 100;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.s_bins = 18;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("s_bins", "int", 0, "Divide (SMin,SMax) to s_bins parts", "", &multiple_objects_detectionConfig::s_bins)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("s_bins", "int", 0, "Divide (SMin,SMax) to s_bins parts", "", &multiple_objects_detectionConfig::s_bins)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.AREA_TOLERANCE = 5;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.AREA_TOLERANCE = 100;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.AREA_TOLERANCE = 20;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("AREA_TOLERANCE", "int", 0, "AREA_TOLERANCE", "", &multiple_objects_detectionConfig::AREA_TOLERANCE)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("AREA_TOLERANCE", "int", 0, "AREA_TOLERANCE", "", &multiple_objects_detectionConfig::AREA_TOLERANCE)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.QUALITY_TOLERANCE = 5000;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.QUALITY_TOLERANCE = 65535;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.QUALITY_TOLERANCE = 20000;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("QUALITY_TOLERANCE", "int", 0, "QUALITY_TOLERANCE", "", &multiple_objects_detectionConfig::QUALITY_TOLERANCE)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("QUALITY_TOLERANCE", "int", 0, "QUALITY_TOLERANCE", "", &multiple_objects_detectionConfig::QUALITY_TOLERANCE)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.DENSITY_TOLORENCE = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.DENSITY_TOLORENCE = 50;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.DENSITY_TOLORENCE = 4;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("DENSITY_TOLORENCE", "int", 0, "DENSITY_TOLORENCE", "", &multiple_objects_detectionConfig::DENSITY_TOLORENCE)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr(new multiple_objects_detectionConfig::ParamDescription<int>("DENSITY_TOLORENCE", "int", 0, "DENSITY_TOLORENCE", "", &multiple_objects_detectionConfig::DENSITY_TOLORENCE)));
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(multiple_objects_detectionConfig::AbstractGroupDescriptionConstPtr(new multiple_objects_detectionConfig::GroupDescription<multiple_objects_detectionConfig::DEFAULT, multiple_objects_detectionConfig>(Default)));
//#line 353 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<multiple_objects_detectionConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<multiple_objects_detectionConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    multiple_objects_detectionConfig __max__;
    multiple_objects_detectionConfig __min__;
    multiple_objects_detectionConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const multiple_objects_detectionConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static multiple_objects_detectionConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &multiple_objects_detectionConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const multiple_objects_detectionConfig &multiple_objects_detectionConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const multiple_objects_detectionConfig &multiple_objects_detectionConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const multiple_objects_detectionConfig &multiple_objects_detectionConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<multiple_objects_detectionConfig::AbstractParamDescriptionConstPtr> &multiple_objects_detectionConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<multiple_objects_detectionConfig::AbstractGroupDescriptionConstPtr> &multiple_objects_detectionConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const multiple_objects_detectionConfigStatics *multiple_objects_detectionConfig::__get_statics__()
  {
    const static multiple_objects_detectionConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = multiple_objects_detectionConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __MULTIPLE_OBJECTS_DETECTIONRECONFIGURATOR_H__
